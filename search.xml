<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[数据结构学习笔记（1） -- 表]]></title>
      <url>http://yoursite.com/2016/12/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89-%E8%A1%A8/</url>
      <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>在数据结构中表的存储形式是线性（又称线性表）的，分为顺序存储（顺序表）和链式存储（链表）</p>
<ul>
<li>顺序表： 即线性表用顺序存储结构保存数据，数据是连续的。</li>
<li>链表： 链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。 相比于线性表顺序结构，操作复杂。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。 <a id="more"></a> 顺序表和链表的简单对比图： <img src="/images/table.png" alt=""></li>
</ul>
<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><blockquote>
<p>链表分为单向链表，双向链表，单向循环链表，双向循环链表。</p>
</blockquote>
<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><blockquote>
<p><strong>单链表</strong> 的每个节点上有两个部分，一个存储元素，另一个存储先一个节点地址的指针，其中尾节点的指针是null</p>
</blockquote>
<p>单链表存储结构图： <img src="/images/single-table.png" alt=""></p>
<blockquote>
<p><strong>单向循环链表</strong> 则是将尾节点的next指针指向头节点，这样就形成了环装（此处不给图了。）</p>
</blockquote>
<h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><blockquote>
<p><strong>双向链表</strong> 每个节点有3个部分：上一个节点的指针，当前节点，下个节点的指针。其中头节点的pre指针是null，而尾节点的next指针是null</p>
</blockquote>
<p>双链表存储结构图： <img src="/images/double-table.png" alt=""></p>
<blockquote>
<p><strong>双向循环链表</strong> 则是将尾节点的next指针指向头节点，头节点的pre指针指向尾节点，这样就形成了环装（此处不给图了。）</p>
</blockquote>
<h1 id="Java代码实现链表和顺序表"><a href="#Java代码实现链表和顺序表" class="headerlink" title="Java代码实现链表和顺序表"></a>Java代码实现链表和顺序表</h1><blockquote>
<p>这里只提供了单链表和顺序表的简单功能实现，并没有考虑到高并发等的问题，代码中可能会出现不严谨的地方，欢迎大家批评指正。</p>
</blockquote>
<h2 id="单链表Java实现"><a href="#单链表Java实现" class="headerlink" title="单链表Java实现"></a>单链表Java实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test.collections;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line">    <span class="keyword">private</span> Node&lt;E&gt; first;</div><div class="line">    <span class="keyword">private</span> Node&lt;E&gt; last;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 添加</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> e</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        <span class="comment">// 默认添加到链表尾部，这就是为啥链接添加快的原因。</span></div><div class="line">        <span class="keyword">return</span> addLast(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 向链表尾部添加一个元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> e</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(e, <span class="keyword">null</span>);</div><div class="line">        Node&lt;E&gt; l = last;</div><div class="line">        <span class="comment">// size=0时，last和first都指向newNode。</span></div><div class="line">        last = newNode;</div><div class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>)</div><div class="line">            first = newNode;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            l.next = newNode;</div><div class="line"></div><div class="line">        size++;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 向链表开头添加元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> e</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(e, <span class="keyword">null</span>);</div><div class="line">        Node&lt;E&gt; currentNode = first;</div><div class="line">        first = newNode;</div><div class="line">        <span class="keyword">if</span> (currentNode == <span class="keyword">null</span>) &#123;</div><div class="line">            last = newNode;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            newNode.next = currentNode;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        size++;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 向链表指定位置添加元素</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E e)</span> </span>&#123;</div><div class="line">        checkIndex(index);</div><div class="line"></div><div class="line">        Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(e, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">if</span> (index == size) &#123;</div><div class="line">            <span class="keyword">return</span> addLast(e);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</div><div class="line">            addFirst(e);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Node&lt;E&gt; currentNode = first;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index - <span class="number">1</span>; i++) &#123;</div><div class="line">                currentNode = currentNode.next;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            newNode.next = currentNode.next;</div><div class="line">            <span class="comment">//</span></div><div class="line">            currentNode.next = newNode;</div><div class="line">            <span class="comment">// first = newNode;</span></div><div class="line">            size++;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查看指定位置元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        checkIndex(index);</div><div class="line">        E e = <span class="keyword">null</span>;</div><div class="line">        Node&lt;E&gt; currentNode = first;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (index &gt; (size - <span class="number">1</span>))</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 每次查询元素时，都有遍历链表 index 次，时间复杂度为 o(index),这就是为啥链表查询慢的原因。</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</div><div class="line">                currentNode = currentNode.next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        e = currentNode.item;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除链表中的一个元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="comment">// 默认删除尾部，这就是为啥链表删除快的原因</span></div><div class="line">        <span class="keyword">return</span> removeLast();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从链表尾部删除一个元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</div><div class="line">        Node&lt;E&gt; l = last;</div><div class="line">        --size;</div><div class="line">        <span class="keyword">if</span> (l == first) &#123;</div><div class="line">            first = <span class="keyword">null</span>;</div><div class="line">            last = <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Node&lt;E&gt; currentNode = first;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++) &#123;</div><div class="line">                currentNode = currentNode.next;</div><div class="line">            &#125;</div><div class="line">            currentNode.next = <span class="keyword">null</span>;</div><div class="line">            last = currentNode;</div><div class="line">        &#125;</div><div class="line">        E e = l.item;</div><div class="line">        l.item = <span class="keyword">null</span>;</div><div class="line">        l.next = <span class="keyword">null</span>;</div><div class="line">        l = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从链表头部删除一个元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (first == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        size--;</div><div class="line">        Node&lt;E&gt; f = first;</div><div class="line">        first = f.next;</div><div class="line">        E e = f.item;</div><div class="line">        f.item = <span class="keyword">null</span>;</div><div class="line">        f.next = <span class="keyword">null</span>;</div><div class="line">        f = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除指定元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> e</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (size &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        Node&lt;E&gt; currentNode = first;</div><div class="line">        <span class="keyword">if</span> (e.equals(currentNode.item)) &#123;</div><div class="line">            removeFirst();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(e.equals(last.item))&#123;</div><div class="line">            removeLast();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (e.equals(currentNode.item)) &#123;</div><div class="line">                <span class="comment">// 可以看出来，单链表中如果删除的元素不是头或尾，删除的时间复杂度还是非常高的。o(2n-1)</span></div><div class="line">                remove(i);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            currentNode = currentNode.next;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> e;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除指定位置元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> e</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        checkIndex(index);</div><div class="line"></div><div class="line">        Node&lt;E&gt; currentNode = first;</div><div class="line">        <span class="comment">// last=null</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; index - <span class="number">1</span>; j++) &#123;</div><div class="line">            currentNode = currentNode.next;</div><div class="line">        &#125;</div><div class="line">        Node&lt;E&gt; removeTarget = currentNode.next;</div><div class="line">        currentNode.next = currentNode.next.next;</div><div class="line">        removeTarget.item = <span class="keyword">null</span>;</div><div class="line">        removeTarget.next = <span class="keyword">null</span>;</div><div class="line">        removeTarget = <span class="keyword">null</span>;</div><div class="line">        size--;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取链表长度</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!(index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size)) &#123;</div><div class="line">            System.out.println(<span class="string">"Exception"</span>);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index out of size: "</span> + index + <span class="string">";"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 节点类（内部类）</div><div class="line">     *</div><div class="line">     * <span class="doctag">@author</span> mercy_yang</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> &lt;E&gt;</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">        E item;</div><div class="line">        Node&lt;E&gt; next;</div><div class="line"></div><div class="line">        Node(E e, Node&lt;E&gt; next) &#123;</div><div class="line">            <span class="keyword">this</span>.item = e;</div><div class="line">            <span class="keyword">this</span>.next = next;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 重写toString()方法</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        sb.append(<span class="string">"["</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.size(); i++) &#123;</div><div class="line">            sb.append(<span class="keyword">this</span>.get(i)).append((i + <span class="number">1</span>) == size ? <span class="string">""</span> : <span class="string">", "</span>);</div><div class="line">        &#125;</div><div class="line">        sb.append(<span class="string">"]"</span>);</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SIngleLinkedList&lt;String&gt; strList = <span class="keyword">new</span> SIngleLinkedList&lt;String&gt;();</div><div class="line">        strList.add(<span class="string">"A"</span>);</div><div class="line"></div><div class="line">        strList.add(<span class="number">1</span>, <span class="string">"B"</span>);</div><div class="line">        <span class="comment">// String c = new String("C");</span></div><div class="line">        <span class="comment">// strList.add(c);</span></div><div class="line">        <span class="comment">// strList.add("D");</span></div><div class="line">        <span class="comment">// strList.add("E");</span></div><div class="line">        <span class="comment">// strList.add("F");</span></div><div class="line">        <span class="comment">// strList.add("G");</span></div><div class="line">        strList.remove(<span class="string">"A"</span>);</div><div class="line">        strList.add(<span class="string">"D"</span>);</div><div class="line">        strList.add(<span class="string">"G"</span>);</div><div class="line">        <span class="comment">// strList.add("G");</span></div><div class="line">        System.out.println(strList.remove(<span class="string">"G"</span>));</div><div class="line">        strList.add(<span class="string">"F"</span>);</div><div class="line">        System.out.println(strList.size());</div><div class="line">        strList.add(<span class="string">"F"</span>);</div><div class="line">        System.out.println(strList);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>java 中的LinkedList就是双向链表存储格式，双向链表的添加和删除会比单链表更高效一点，有兴趣的可以看一下源码，对比一下。</p>
</blockquote>
<h2 id="顺序表的java实现"><a href="#顺序表的java实现" class="headerlink" title="顺序表的java实现"></a>顺序表的java实现</h2><blockquote>
<p>java 中的ArrayList就是典型的顺序表存储(数组)，这里就参考 ArrayList 实现一个自己的顺序表。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> test.collections;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Arrays;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 顺便表的简单实现，底层维护一个数组</div><div class="line"> * 实现了：曾删查改 功能。</div><div class="line"> * <span class="doctag">@author</span> mercy_yang</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> &lt;E&gt;</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyArrayList</span>&lt;<span class="title">E</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</div><div class="line">    <span class="keyword">private</span> Object[] elements;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INITAIL_SIZE = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.elements = EMPTY_ELEMENTDATA;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyArrayList</span><span class="params">(<span class="keyword">int</span> capacity)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.elements=<span class="keyword">new</span> Object[capacity];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 默认向顺序表尾部插入元素</div><div class="line">     * <span class="doctag">@param</span> e</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">    <span class="comment">//当size超过顺序表长度是就自动扩充长度，</span></div><div class="line">        <span class="comment">//这是顺序表插入时主要耗时的地方，但是大部分向尾部插入速度还是很快的。</span></div><div class="line">        expandCapacity(size + <span class="number">1</span>);</div><div class="line">        elements[size++] = e;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 向指定位置添加元素</div><div class="line">     * 需要移动数组，这就是为啥顺序表插入元素慢的原因</div><div class="line">     * <span class="doctag">@param</span> index</div><div class="line">     * <span class="doctag">@param</span> e</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index,E e)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (index==size) &#123;</div><div class="line">            add(e);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        checkIndex(index);</div><div class="line">        expandCapacity(size+<span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 这里也可以直接使用 System.arraycopy(elements, index, elements, index+1, size-index);</div><div class="line">         * 将elements数组从index的位置开始，移动到elements数组的index+1的位置，移动长度为（size-index）</div><div class="line">         */</div><div class="line">        Object[] oldElements = elements;</div><div class="line">        Object[] newElements =<span class="keyword">new</span> Object[elements.length];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</div><div class="line">            newElements[i]=oldElements[i];</div><div class="line">        &#125;</div><div class="line">        newElements[index] = e;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; size; i++) &#123;</div><div class="line">            newElements[i+<span class="number">1</span>] = oldElements[i];</div><div class="line">        &#125;</div><div class="line">        elements=newElements;</div><div class="line">        newElements=<span class="keyword">null</span>;</div><div class="line">        oldElements=<span class="keyword">null</span>;</div><div class="line">        size++;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 扩充顺序表的长度</div><div class="line">     * <span class="doctag">@param</span> capacity</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">expandCapacity</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (capacity &lt; INITAIL_SIZE) &#123;</div><div class="line">            capacity = Math.max(INITAIL_SIZE, capacity);</div><div class="line">            elements = Arrays.copyOf(elements, capacity);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(capacity-elements.length&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">int</span> length = elements.length;</div><div class="line">            <span class="keyword">int</span> newCapacity = length + (length &gt;&gt; <span class="number">1</span>);</div><div class="line">            elements = Arrays.copyOf(elements, newCapacity);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询元素</div><div class="line">     * 直接通过下标访问，时间复杂度为o(1)</div><div class="line">     * <span class="doctag">@param</span> i</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> (E)elements[i];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除元素时间，复杂度最慢为o(n)</div><div class="line">     * <span class="doctag">@param</span> index</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</div><div class="line">        checkIndex(index);</div><div class="line">        E oldValue = (E) get(index);</div><div class="line">        <span class="keyword">if</span>((index+<span class="number">1</span>)&lt;size)&#123;</div><div class="line">            System.out.println(<span class="string">"移动数组"</span>);</div><div class="line">            Object[] oldElements = elements;</div><div class="line">            Object[] newElements =<span class="keyword">new</span> Object[elements.length];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;index;i++)&#123;</div><div class="line">                newElements[i]=oldElements[i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index+<span class="number">1</span>; i &lt; size; i++) &#123;</div><div class="line">                newElements[i-<span class="number">1</span>] = oldElements[i];</div><div class="line">            &#125;</div><div class="line">            elements=newElements;</div><div class="line">            newElements=<span class="keyword">null</span>;</div><div class="line">            oldElements=<span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        elements[--size]=<span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> oldValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 修改元素，时间复杂读为o(1)</div><div class="line">     * <span class="doctag">@param</span> index</div><div class="line">     * <span class="doctag">@param</span> e</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> index ,E e)</span></span>&#123;</div><div class="line">        checkIndex(index);</div><div class="line">        elements[index] = e;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line"><span class="comment">//        if(!(index&gt;0&amp;&amp;index&lt;size))&#123;</span></div><div class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span>||index&gt;size)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index out of size: "</span>+index);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> size;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">        sb.append(<span class="string">"["</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            sb.append(<span class="keyword">this</span>.get(i)).append((i+<span class="number">1</span>)==size?<span class="string">""</span>:<span class="string">", "</span>);</div><div class="line">        &#125;</div><div class="line">        sb.append(<span class="string">"]"</span>);</div><div class="line">        <span class="keyword">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        MyArrayList&lt;String&gt; arrayStr = <span class="keyword">new</span> MyArrayList&lt;String&gt;();</div><div class="line">        arrayStr.add(<span class="string">"A"</span>);</div><div class="line">        arrayStr.add(<span class="string">"B"</span>);</div><div class="line">        arrayStr.add(<span class="string">"C"</span>);</div><div class="line">        arrayStr.add(<span class="string">"D"</span>);</div><div class="line">        arrayStr.add(<span class="number">3</span>,<span class="string">"C"</span>);</div><div class="line">        arrayStr.add(<span class="number">4</span>,<span class="string">"i"</span>);</div><div class="line">        arrayStr.add(<span class="number">2</span>,<span class="string">"i"</span>);</div><div class="line">        arrayStr.add(<span class="number">0</span>,<span class="string">"o"</span>);</div><div class="line">        arrayStr.add(<span class="number">8</span>,<span class="string">"o"</span>);</div><div class="line"><span class="comment">//        System.err.println(arrayStr.elements.length);</span></div><div class="line"><span class="comment">//        System.out.println(arrayStr.size());</span></div><div class="line">        arrayStr.remove(<span class="number">9</span>);</div><div class="line">        arrayStr.remove(<span class="number">1</span>);</div><div class="line">        System.out.println(arrayStr);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这里只是参考ArrayList简单的实现了一个顺序表存储。其中在 <strong>remove(int index,E e)</strong> 和 <strong>add(int index,E e)</strong> 方法中模拟 <strong>System.arraycopy(elements, index, elements, index+1, size-index);</strong> 实现了数组了copy， 只是为了说明顺序表在添加和删除速度偏慢是因为需要移动数组。</p>
</blockquote>
<h2 id="Java-中-LinkedList和ArrayList性能对比"><a href="#Java-中-LinkedList和ArrayList性能对比" class="headerlink" title="Java 中 LinkedList和ArrayList性能对比"></a>Java 中 LinkedList和ArrayList性能对比</h2><blockquote>
<p>推荐大家自己动手对比一下 <strong>LinkedList</strong> 和 <strong>ArrayList</strong> 的增删查改的速度，其实 <strong>ArrayList</strong> 在增删时不一定比 <strong>LinkedList</strong> 慢。</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义checkbox样式]]></title>
      <url>http://yoursite.com/2016/12/28/%E8%87%AA%E5%AE%9A%E4%B9%89checkbox%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="通过css来自定义checkbox样式"><a href="#通过css来自定义checkbox样式" class="headerlink" title="通过css来自定义checkbox样式"></a>通过css来自定义checkbox样式</h1><p>截图： 原生的 checkbox 和 自定义 checkbox 比较</p>
<p><img src="/images/checkbox-before.png" alt=""><img src="/images/checkbox-after.png" alt=""><br><a id="more"></a></p>
<h1 id="思路与步骤"><a href="#思路与步骤" class="headerlink" title="思路与步骤"></a>思路与步骤</h1><ol>
<li><p>首先禁止默认的checkbox显示</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.checkbox</span>&#123;</div><div class="line"><span class="attribute">display</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用其他的 span(或者其他的标签也行，如： <i>) 来表示成 checkbox 的外观</i></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox-label"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"checkbox"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-ok checkbox-span"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="comment">&lt;!-- 这里span里的 glyphicon glyphicon-ok 的class是bootstrap提供的图标类，即对勾图标--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里的原理就是，<strong>点击紧跟在checkbox后面的内容就可以选中这个checkbox</strong>,所以我们只需要为跟在后面的这个 <strong>span</strong> 添加css样式，变为我们想要的样子。<br>下面我们就开始改变这个span，这里用到的 <strong>bootstrap</strong> 提供的对勾（√）图标，大家可以自行google使用它。</p>
</li>
<li><p>接下来就是为 class <strong>checkbox-span</strong> 定义css样式</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 选中之前的样式 */</span></div><div class="line"><span class="selector-class">.checkbox-span</span>&#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(0, 0, 0, 0.15);</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">  <span class="attribute">height</span>: <span class="number">17px</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">17px</span>;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="built_in">rgba</span>(111, 111, 111, 0.5),</div><div class="line">              <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(111, 111, 111, 0.5);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 选中之后的样式 */</span></div><div class="line"><span class="selector-class">.checkbox</span><span class="selector-pseudo">:checked+.checkbox-span</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#399CFF</span>;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="built_in">rgba</span>(0, 204, 204, .5),<span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0, 204, 204, .5);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 鼠标悬浮的样式 */</span></div><div class="line"><span class="selector-class">.checkbox</span>+<span class="selector-tag">span</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="built_in">rgba</span>(0, 204, 204, .5),<span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0, 204, 204, .5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里我们就大功告成了，下面就贴出完整例子</p>
</li>
<li><p>完整html代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"static/css/bootstrap.min.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></div><div class="line"></div><div class="line">        <span class="selector-class">.checkbox</span> &#123;</div><div class="line">            <span class="attribute">display</span>: none;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/* 选中之前的样式 */</span></div><div class="line"></div><div class="line">        <span class="selector-class">.checkbox-span</span> &#123;</div><div class="line">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(0, 0, 0, 0.15);</div><div class="line">            <span class="attribute">display</span>: inline-block;</div><div class="line">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</div><div class="line">            <span class="attribute">vertical-align</span>: middle;</div><div class="line">            <span class="attribute">height</span>: <span class="number">17px</span>;</div><div class="line">            <span class="attribute">width</span>: <span class="number">17px</span>;</div><div class="line">            <span class="attribute">font-size</span>: <span class="number">15px</span>;</div><div class="line">            <span class="attribute">line-height</span>: <span class="number">1</span>;</div><div class="line">            <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="built_in">rgba</span>(111, 111, 111, 0.5), <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(111, 111, 111, 0.5);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/* 选中之后的样式 */</span></div><div class="line"></div><div class="line">        <span class="selector-class">.checkbox</span><span class="selector-pseudo">:checked+.checkbox-span</span> &#123;</div><div class="line">            <span class="attribute">background-color</span>: <span class="number">#399CFF</span>;</div><div class="line">            <span class="attribute">display</span>: inline-block;</div><div class="line">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="built_in">rgba</span>(0, 204, 204, .5), <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0, 204, 204, .5);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/* 鼠标悬浮的样式 */</span></div><div class="line"></div><div class="line">        <span class="selector-class">.checkbox</span>+<span class="selector-class">.checkbox-span</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0px</span> <span class="built_in">rgba</span>(0, 204, 204, .5), <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0, 204, 204, .5);</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox-label"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"checkbox"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-ok checkbox-span"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 这里span里的 fa fa-check 的class是bootstrap提供的图标类，即对勾图标--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[java static、final关键字.md]]></title>
      <url>http://yoursite.com/2016/12/22/java-static%E3%80%81final%E5%85%B3%E9%94%AE%E5%AD%97-md/</url>
      <content type="html"><![CDATA[<h2 id="static-的基本用法和执行顺序"><a href="#static-的基本用法和执行顺序" class="headerlink" title="static 的基本用法和执行顺序"></a>static 的基本用法和执行顺序</h2><p>基础概念</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">被static修饰的属性，字段，方法，块等，都会在类加载时被初始化，且只初始化一次，由static修饰的字段被类所有实例所共享。</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>这里补充一下，类何时被加载：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- 创建类实例时。</div><div class="line">- 访问类的静态变量（注意这里指的是变量，如果是静态常量&lt;static final&gt;则不会初始化类，这个后面会讲到）。</div><div class="line">- 调用类的静态方法时。</div><div class="line">- 反射（如：Class.forName(xxx.xxx.XXXX)。</div><div class="line">- 该类子类被初始化时，父类也会被初始化。（但是直接通过子类引用调用父类静态元素，子类不会被加载）</div><div class="line">- Java虚拟机被标明为启动类的类（如 main() 方法）</div></pre></td></tr></table></figure>
<p>有了上面的概念，我再来看代码</p>
<h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3><p>准备：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Grandpa</span></span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String grandpa_value=<span class="string">"I am your grandpa..."</span>;</div><div class="line"></div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		System.out.println(<span class="string">"Grandpa static area..."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Grandpa</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Grandpa's constructor"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFinalDemo</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Grandpa gp1 = <span class="keyword">new</span> Grandpa();</div><div class="line">		Grandpa gp2 = <span class="keyword">new</span> Grandpa();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">I am your grandpa...</div><div class="line">Grandpa static area...</div><div class="line">Grandpa&apos;s constructor...</div><div class="line">Grandpa&apos;s constructor...</div></pre></td></tr></table></figure>
<p>上面的例子就是典型的在新建 <strong>Grandpa</strong> 实例时，时加载 <strong>Grandpa</strong> 类,且由static修饰块或字段优先于类的构造函数执行，且类只执行一次（每次new对象时都会执行构造函数）。</p>
<h3 id="子类初始化父类"><a href="#子类初始化父类" class="headerlink" title="子类初始化父类"></a>子类初始化父类</h3><p>基于上面的代码，我们加上：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Grandpa</span></span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String father_value=<span class="string">"I am your father..."</span>;</div><div class="line"></div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		System.out.println(father_value);</div><div class="line">		System.out.println(<span class="string">"Father static area..."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Father's constructor..."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> String son_value=<span class="string">"I am Son..."</span>;</div><div class="line"></div><div class="line">	<span class="keyword">static</span>&#123;</div><div class="line">		System.out.println(son_value);</div><div class="line">		System.out.println(<span class="string">"Son static area..."</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">()</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"Son's constructor..."</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再在修改 StaticFinalDemo 的 main() 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Son s = <span class="keyword">new</span> Son();</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">I am your grandpa...</div><div class="line">Grandpa static area...</div><div class="line">I am your father...</div><div class="line">Father static area...</div><div class="line">I am Son...</div><div class="line">Son static area...</div><div class="line">Grandpa&apos;s constructor...</div><div class="line">Father&apos;s constructor...</div><div class="line">Son&apos;s constructor...</div></pre></td></tr></table></figure>
<p>可以看到，在初始化Son类时，Son父类（Father、Grandp）都被初始化了，且顺序是 Grandpa &gt; Father &gt; Son</p>
<p>我们再次修改一下 main() 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Father f = <span class="keyword">new</span> Father();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">I am your grandpa...</div><div class="line">Grandpa static area...</div><div class="line">I am your father...</div><div class="line">Father static area...</div><div class="line">Grandpa&apos;s constructor...</div><div class="line">Father&apos;s constructor...</div></pre></td></tr></table></figure>
<p>可以看出，父类 Father 的初始化没有初始化子类 Son。</p>
<p>未完待续…</p>
<h3 id="其他-static-使用场景"><a href="#其他-static-使用场景" class="headerlink" title="其他 static 使用场景"></a>其他 static 使用场景</h3><h4 id="1-静态内部类"><a href="#1-静态内部类" class="headerlink" title="1. 静态内部类"></a>1. 静态内部类</h4><h4 id="2-静态导包"><a href="#2-静态导包" class="headerlink" title="2. 静态导包"></a>2. 静态导包</h4><h2 id="final-使用"><a href="#final-使用" class="headerlink" title="final 使用"></a>final 使用</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[postgresql 索引.md]]></title>
      <url>http://yoursite.com/2016/12/20/postgresql-%E7%B4%A2%E5%BC%95-md/</url>
      <content type="html"><![CDATA[<h2 id="索引的基础知识"><a href="#索引的基础知识" class="headerlink" title="索引的基础知识"></a>索引的基础知识</h2><p>索引是一种特殊的查询表，可以使用搜索引擎的数据库以加快数据检索。简单地说，索引是表中的数据的一个指针，在一个数据库中的索引是非常相似，如：一本书的目录。<br><a id="more"></a><br>例如，如果想在一本书中引用的所有页面讨论某个话题，先参考索引按字母顺序列出所有目录主题，然后转到一个或多个特定的页码。</p>
<p>索引有助于加快SELECT查询和WHERE子句，但它会减慢数据的输入，UPDATE和INSERT语句。索引可以创建或删除的数据没有影响。</p>
<p>创建索引涉及CREATE INDEX语句，它允许命名的索引，索引指定表的一列或多列，并指示索引是否在升序或降序排列。</p>
<p>索引也可以是唯一的，类似UNIQUE约束，在列上有一个索引的列或组合索引防止重复项。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>建表</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-- Table: t3</div><div class="line">-- DROP TABLE t3;</div><div class="line">CREATE TABLE t3</div><div class="line">(</div><div class="line">  a character varying(10),</div><div class="line">  b character varying(10),</div><div class="line">  c character varying(10)</div><div class="line">)</div></pre></td></tr></table></figure>
<p>插入数据 （运行几十次，插入几十万跳记录）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">INSERT INTO t3 values(generate_series(1,10000)||&apos;a&apos;,generate_series(1,10000)||&apos;b&apos;,generate_series(1,10000)||&apos;c&apos;)</div></pre></td></tr></table></figure>
<h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>在创建索引之前先看一下执行查询语句的时间：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXPLAIN ANALYZE SELECT a,b,c FROM t3 WHERE a=&apos;1a&apos;;</div></pre></td></tr></table></figure>
<p>执行结果如下：(注意比较最好一行的 “Total runtime: xxx”)</p>
<p><img src="/images/select_before_index.png" alt=""></p>
<p>接着创建在 column（a）上的索引，语句：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE INDEX idx_t3_a ON t3(a)</div></pre></td></tr></table></figure>
<p>再次执行上面的查询语句，执行结果如下：</p>
<p><img src="/images/select_after_index.png" alt=""></p>
<h2 id="索引的类别"><a href="#索引的类别" class="headerlink" title="索引的类别"></a>索引的类别</h2><p>PostgreSQL提供了几种索引类型：B-树，哈希，GIST，SP-GiST和GIN。每个索引类型使用不同的算法，是最适合于不同类型的查询。默认情况下，CREATE INDEX命令创建B-tree索引，适合最常见的情况。</p>
<h3 id="单列索引"><a href="#单列索引" class="headerlink" title="单列索引"></a>单列索引</h3><p>刚刚创建的在column（a）上的索引，就是一个单列索引。</p>
<h3 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h3><p>语句</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE INDEX idx_t3_abc ON t3(a,b,c)</div></pre></td></tr></table></figure>
<p>是否要创建一个单列索引或多列索引，要根据该列是否在where频繁使用。<br><strong>另外需要注意</strong> 的是创建多列索引有一个 <strong>最左前缀原则</strong> ，即想要使用多列索引就必须要在where子句中出现多列索引的最左列，即本例中的 a 列。</p>
<p>没有加入条件 a ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXPLAIN ANALYZE SELECT a,b,c FROM t3 where b=&apos;1b&apos; and c=&apos;1c&apos;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="/images/select_no_left.png" alt=""></p>
<p>加入条件 a：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXPLAIN ANALYZE SELECT a,b,c FROM t3 where b=&apos;1b&apos; and c=&apos;1c&apos; and a=&apos;1a&apos;</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="/images/select_with_left.png" alt=""></p>
<h3 id="部分索引"><a href="#部分索引" class="headerlink" title="部分索引"></a>部分索引</h3><p>部分索引是一个索引建在一个表的一个子集，该子集是一个条件表达式定义的（叫做部分索引的谓词）。该指数包含的条目只有那些满足谓词的表行。基本语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CREATE INDEX idx_t3_c_1c ON t3(c) WHERE c=&apos;1c&apos;</div></pre></td></tr></table></figure>
<p>执行查询，当条件为 c=’10c’ 时：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXPLAIN ANALYZE SELECT a,b,c FROM t3 where c=&apos;10c&apos;</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<p><img src="/images/select_no_condition.png" alt=""></p>
<p>执行查询，当条件为 c=’1c’ 时：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">EXPLAIN ANALYZE SELECT a,b,c FROM t3 where c=&apos;1c&apos;</div></pre></td></tr></table></figure>
<p>执行结果：</p>
<p><img src="/images/select_with_condition.png" alt=""></p>
<h2 id="何时不该创建索引"><a href="#何时不该创建索引" class="headerlink" title="何时不该创建索引"></a>何时不该创建索引</h2><p>虽然索引的目的在于提高数据库的性能，有时间时，应避免。使用索引时，应重新考虑下列准则：</p>
<ul>
<li>索引不应该用在数据量小的表上。</li>
<li>有频繁的大量的插入或更新的操作的表。</li>
<li>索引不应包含有大量null值的列。</li>
<li>频繁操作的列都将不建议使用索引。</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><blockquote>
<p>【易百】<a href="http://www.yiibai.com/html/postgresql/2013/080674.html" target="_blank" rel="external">http://www.yiibai.com/html/postgresql/2013/080674.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javascript 对象.md]]></title>
      <url>http://yoursite.com/2016/12/19/javascript-%E5%AF%B9%E8%B1%A1-md/</url>
      <content type="html"><![CDATA[<h1 id="JavaScript内置对象"><a href="#JavaScript内置对象" class="headerlink" title="JavaScript内置对象"></a>JavaScript内置对象</h1><ul>
<li>javascript 有很多内置对象, 如：<strong>Object, Function, Array, Date, RegExp, Math, Error, Symbol, String, Number, Boolean</strong>.<a id="more"></a>
<h1 id="JavaScript的祖先和两位长老"><a href="#JavaScript的祖先和两位长老" class="headerlink" title="JavaScript的祖先和两位长老"></a>JavaScript的祖先和两位长老</h1></li>
</ul>
<p><img src="/images/js-inheried.png" alt=""></p>
<ol>
<li><p><strong>万物皆空</strong> ，从上图可以看出来，JavaScript的祖先 <strong>NULL</strong> ，而两位长老分别是： <strong>Object.prototype</strong>、<strong>Function.prototype</strong> 。</p>
</li>
<li><p>原型指针（<strong>__proto__</strong>)和原型对象(<strong>prototype</strong>)</p>
<p>1).  原型指针（<strong>__proto__</strong>):</p>
<pre><code>每个对象都有个原型指针指向该对象的原型对象
</code></pre> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object.prototype.__proto__ === null    //true,所以Object.prototype的原型是null。</div></pre></td></tr></table></figure>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var Person = function(name)&#123;</div><div class="line">this.name = name;</div><div class="line">&#125;;</div><div class="line">p1 = new Person(&apos;zhnagsan&apos;);</div><div class="line">p2 = new Person(&apos;lisi&apos;);</div><div class="line">p1.__proto__===Person.prototype     //true</div><div class="line">p2.__proto__===Person.prototype     //true</div><div class="line">p1.__proto__ === p2.__proto__       //true</div><div class="line">Person.__proto__ === Function.prototype     //true</div><div class="line">Person.__proto__.__proto__ ===Object.prototype     //true</div><div class="line">Person.__proto__.__proto__.__proto__ === null     //true</div></pre></td></tr></table></figure>
<p> 值得注意的是，按照语言标准，__proto__ 属性只有浏览器才需要部署，其他环境可以没有这个属性，而且前后的两根下划线，表示它本质是一个内部属性，不应该对使用者暴露。因此，应该尽量少用这个属性，而是用Object.getPrototypeof和Object.setPrototypeOf，进行原型对象的读写操作。</p>
<p>2). 原型对象（<strong>prototype</strong>）:<br>   每个函数对象都有 <strong>prototype</strong> 属性，这里需要注意的是：只有函数对象才有 <strong>prototype</strong> 属性,函数对象也是对象，同时也拥有 __proto__ 属性，指向 <strong>Function.prototype</strong> .</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var Person = function(name)&#123;</div><div class="line">this.name=name;</div><div class="line">&#125;</div><div class="line">console.log(Person.prototype);  // --&gt; Object &#123;...&#125;</div><div class="line">Person.__proto__ === Function.prototype;     // true</div></pre></td></tr></table></figure>
<p> 每个原型对象都有自己的构造函数 constructor,并且构造函数指向对象本身：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Person.prototype.constructor === Person     //true, Person.prototype.constructor指向对象本身</div></pre></td></tr></table></figure>
<p> 一般将一些对象公用的方法定义在对象的原型对象里：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Person.prototype.sayName =function sayName()&#123;</div><div class="line">console.log(this.name);</div><div class="line">&#125;</div><div class="line">p1 = new Person(&apos;zhnagsan&apos;);</div><div class="line">p2 = new Person(&apos;lisi&apos;);</div><div class="line">console.log(p1.sayName());    // zhangsan</div><div class="line">console.log(p2.sayName());    //lisi</div></pre></td></tr></table></figure>
<p>3). 用两张图来表示原型对象和原型指针的关系：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var a = new Array();</div></pre></td></tr></table></figure>
<p> <img src="/images/proto1.png" alt=""></p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var Foo = function() &#123;&#125;</div><div class="line">var a = new Foo();</div></pre></td></tr></table></figure>
<p> <img src="/images/proto2.png" alt=""></p>
</li>
<li><p>再说两位长老<br>从上可以看书出，JavaScript中的两位长老 <strong>Object.prototype</strong>,<strong>Function.prototype</strong>。可以这样总结这两个对象：</p>
<blockquote>
<p><strong>Object.prototype</strong> 是所有函数对象的原型对象的原型（即 *.prototype.__proto__ 所指的对象）,也是普通对象的原型。<br> <strong>Function.prototype</strong> 是所有函数对象的原型（即 *.__proto__)<br> ps： 这里的 * 都指的是 函数对象。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var obj = &#123;a:1&#125;;</div><div class="line">obj.__proto__ === Object.prototype   // true</div><div class="line">var fun = function()&#123;&#125;  </div><div class="line">fun.__proto__ === Function.prototype    //  true</div><div class="line">fun.prototype instanceof Object     //true</div><div class="line">fun.prototype.__proto__   //true</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>本文参考： <a href="http://www.jianshu.com/p/3bb6f208e459" target="_blank" rel="external">http://www.jianshu.com/p/3bb6f208e459</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux 常用命令总结.md]]></title>
      <url>http://yoursite.com/2016/12/16/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93-md/</url>
      <content type="html"><![CDATA[<ol>
<li>ls:    <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -al</div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>touch  :创建文件    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">touch + [pram] + [filename]  </div><div class="line">touch -t 201111051200 file1 //指定创建时间</div></pre></td></tr></table></figure>
</li>
<li><p>cp     </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//主要用法</div><div class="line">cp -l file1 file2 //为file1创建硬链接</div><div class="line">cp -s file1 file2 //为file1创建软链接，相当于 ln命令</div><div class="line">//其他参数</div><div class="line">-R //copy目录，递归</div><div class="line">-p //保留文件属性</div></pre></td></tr></table></figure>
</li>
<li><p>rm  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rm -r // 删除目录，递归</div><div class="line">rm -f //强制删除</div></pre></td></tr></table></figure>
</li>
<li><p>mv</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 常用与给文件或目录重命名</div><div class="line">mv [file1] [file2]</div></pre></td></tr></table></figure>
</li>
<li><p>cat  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//查看文件内容</div><div class="line">cat -n [file] //给显示的文件加上行数</div><div class="line">cat -b [file] //只给有内容的行显示行数</div></pre></td></tr></table></figure>
</li>
<li><p>more ， less  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//更方便的额查看文件</div><div class="line">more [file]</div><div class="line">less [file] //  less是more的升级版 ，大致功能类似</div></pre></td></tr></table></figure>
</li>
<li><p>tail ， head  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tail // 查看文件末尾</div><div class="line">head // 查看文件开头</div><div class="line">//常用</div><div class="line">tail -f [file]  //  这个命令常用来查看log 文件，可以让tail一直保持活跃，有新的内容就会显示。</div><div class="line">head -n  [file] // n是数字， 查看开头n行的内容</div></pre></td></tr></table></figure>
</li>
<li><p>|  ， grep</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> | 符号在Linux中是一种管道。</div><div class="line">cat [file] |  more // 通过 | 将输出转到 more程序中</div><div class="line">grep //是过滤操作 ，通常和 | 搭配使用</div><div class="line">cat HttpGetRequest.java | grep if // 从 HttpGetRequest.java中 所有包含 ‘if’ 的行</div></pre></td></tr></table></figure>
</li>
<li><p>ps</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// ps 是Linux中常用命令，用来查看进程的，常用的参数有</div><div class="line">ps -e // 查看所有的进程</div><div class="line">ps -f // 完整格式显示输出</div><div class="line">ps -ef | grep tomcat // 查看包含 tomat 的进程</div></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[first]]></title>
      <url>http://yoursite.com/2016/12/16/first/</url>
      <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h1>]]></content>
    </entry>
    
  
  
</search>
